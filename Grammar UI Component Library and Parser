import React, { useState } from 'react';
import * as Icons from 'lucide-react';

// Design tokens
const tokens = {
  colors: {
    bgBase: 'var(--background-primary, #000)',
    bgSurface: 'var(--background-secondary, #0a0a0a)',
    bgHover: 'var(--background-modifier-hover, #0f0f0f)',
    border: 'var(--background-modifier-border, #1a1a1a)',
    textBright: 'var(--text-normal, #ccc)',
    textMid: 'var(--text-muted, #999)',
    textDim: 'var(--text-faint, #666)',
    textMuted: 'var(--text-faint, #555)',
    iconPrimary: 'var(--icon-color, #666)',
    iconDim: 'var(--icon-color-focused, #555)',
    iconBright: 'var(--icon-color-hover, #888)',
    accent: 'var(--interactive-accent, #7c3aed)',
  },
  spacing: {
    xs: '4px',
    sm: '6px',
    md: '8px',
    lg: '12px',
    xl: '16px',
    '2xl': '24px',
    '3xl': '32px',
  },
  fontSize: {
    xs: '12px',
    sm: '13px',
    base: '14px',
    lg: '16px',
    xl: '18px',
  },
  radius: {
    sm: '3px',
    md: '4px',
  },
  transition: '150ms ease',
};

// Text Component
export const Text = ({ 
  size = 'base', 
  color = 'mid', 
  weight = 'normal',
  mono = false,
  link = false,
  onClick,
  children,
  style = {}
}) => {
  const colorMap = {
    bright: tokens.colors.textBright,
    mid: tokens.colors.textMid,
    dim: tokens.colors.textDim,
    muted: tokens.colors.textMuted,
  };

  const baseStyle = {
    fontSize: tokens.fontSize[size],
    color: colorMap[color],
    fontWeight: weight === 'medium' ? 500 : 400,
    fontFamily: mono ? 'monospace' : 'inherit',
    lineHeight: '1.5',
    ...style
  };

  if (link) {
    return (
      <div 
        style={{
          ...baseStyle,
          cursor: 'pointer',
          color: tokens.colors.accent,
          textDecoration: 'none',
        }}
        onClick={onClick}
      >
        {children}
      </div>
    );
  }

  return (
    <div style={baseStyle}>
      {children}
    </div>
  );
};

// Icon Component
export const Icon = ({ name, size = 14, color = 'primary' }) => {
  if (!name) return null;
  
  const pascalName = name.split('-').map(word => 
    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
  ).join('');
  
  const IconComponent = Icons[pascalName];
  
  if (!IconComponent) {
    console.warn(`Icon "${name}" (${pascalName}) not found in lucide-react`);
    return null;
  }

  const colorMap = {
    primary: tokens.colors.iconPrimary,
    dim: tokens.colors.iconDim,
    bright: tokens.colors.iconBright,
  };

  return <IconComponent size={size} color={colorMap[color]} style={{ flexShrink: 0, marginTop: '2px' }} />;
};

// Badge Component
export const Badge = ({ children, variant = 'default' }) => {
  const variants = {
    default: { bg: tokens.colors.bgSurface, color: tokens.colors.textDim },
    accent: { bg: tokens.colors.accent + '20', color: tokens.colors.accent },
    success: { bg: '#3a4a3a', color: '#5a7a5a' },
    error: { bg: '#4a3a3a', color: '#7a5a5a' },
  };

  const style = variants[variant] || variants.default;

  return (
    <span style={{
      display: 'inline-flex',
      alignItems: 'center',
      padding: `2px ${tokens.spacing.sm}`,
      background: style.bg,
      color: style.color,
      fontSize: tokens.fontSize.sm,
      borderRadius: tokens.radius.sm,
      border: '1px solid rgba(255,255,255,0.05)',
    }}>
      {children}
    </span>
  );
};

// Card Component
export const Card = ({ children, hover = false, onClick }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <div
      onClick={onClick}
      onMouseEnter={() => hover && setIsHovered(true)}
      onMouseLeave={() => hover && setIsHovered(false)}
      style={{
        border: `1px solid ${tokens.colors.border}`,
        borderRadius: tokens.radius.md,
        background: isHovered ? tokens.colors.bgHover : tokens.colors.bgSurface,
        padding: tokens.spacing.lg,
        cursor: hover ? 'pointer' : 'default',
        transition: `all ${tokens.transition}`,
      }}
    >
      {children}
    </div>
  );
};

// Stack Component
export const Stack = ({ direction = 'vertical', gap = 'md', align = 'stretch', children, style = {} }) => {
  return (
    <div style={{
      display: 'flex',
      flexDirection: direction === 'vertical' ? 'column' : 'row',
      gap: tokens.spacing[gap],
      alignItems: align,
      ...style
    }}>
      {children}
    </div>
  );
};

// Link Component
export const Link = ({ icon, href, onClick, children }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <a
      href={href}
      onClick={(e) => {
        if (onClick) {
          e.preventDefault();
          onClick();
        }
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{
        display: 'inline-flex',
        alignItems: 'center',
        gap: tokens.spacing.xs,
        color: isHovered ? tokens.colors.textBright : tokens.colors.textMid,
        textDecoration: 'none',
        fontSize: tokens.fontSize.sm,
        cursor: 'pointer',
        transition: `color ${tokens.transition}`,
      }}
    >
      {icon && <Icon name={icon} size={12} />}
      {children}
    </a>
  );
};

// Grid Component
export const Grid = ({ 
  cols = '1',
  gap = 'md',
  min,
  align = 'center',
  justify = 'start',
  border = false,
  background = false,
  padding,
  hover = false,
  children,
  style = {}
}) => {
  const [isHovered, setIsHovered] = useState(false);

  let gridCols;
  if (cols === 'auto') {
    gridCols = 'auto';
  } else if (cols === 'auto-fit') {
    const minWidth = min || '120px';
    gridCols = `repeat(auto-fit, minmax(${minWidth}, 1fr))`;
  } else {
    gridCols = cols === '1' ? '1fr' : `repeat(${cols}, 1fr)`;
  }

  const baseStyle = {
    display: 'grid',
    gridTemplateColumns: gridCols,
    gridAutoFlow: cols === 'auto' ? 'column' : 'row',
    gap: tokens.spacing[gap],
    alignItems: align,
    justifyContent: justify,
    ...(border && { border: `1px solid ${tokens.colors.border}` }),
    ...(background && { background: tokens.colors.bgSurface }),
    ...(padding && { padding: tokens.spacing[padding] }),
    ...(border && { borderRadius: tokens.radius.md }),
    ...(hover && isHovered && { background: tokens.colors.bgHover }),
    ...(hover && { cursor: 'pointer' }),
    transition: `all ${tokens.transition}`,
    ...style
  };

  return (
    <div 
      style={baseStyle}
      onMouseEnter={() => hover && setIsHovered(true)}
      onMouseLeave={() => hover && setIsHovered(false)}
    >
      {children}
    </div>
  );
};

// Button Component
export const Button = ({ icon, primary = false, onClick, children, ariaLabel }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <button
      onClick={onClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      aria-label={ariaLabel}
      style={{
        background: isHovered ? tokens.colors.bgHover : 'none',
        border: 'none',
        color: isHovered ? (primary ? tokens.colors.textBright : tokens.colors.textMid) : (primary ? tokens.colors.textMid : tokens.colors.textDim),
        fontSize: tokens.fontSize.sm,
        cursor: 'pointer',
        padding: `${tokens.spacing.sm} ${tokens.spacing.md}`,
        borderRadius: tokens.radius.sm,
        display: 'flex',
        alignItems: 'center',
        gap: tokens.spacing.sm,
        transition: `all ${tokens.transition}`,
      }}
    >
      {icon && <Icon name={icon} size={12} />}
      <span>{children}</span>
    </button>
  );
};

// Divider Component
export const Divider = ({ direction = 'h', space = 'lg' }) => {
  const isHorizontal = direction === 'h';
  
  return (
    <div style={{
      ...(isHorizontal ? {
        height: '1px',
        width: '100%',
        margin: `${tokens.spacing[space]} 0`,
      } : {
        width: '1px',
        height: '100%',
        margin: `0 ${tokens.spacing[space]}`
      }),
      background: tokens.colors.border,
    }} />
  );
};

// Status Component
export const Status = ({ type = 'info', children }) => {
  const config = {
    success: { icon: 'CheckCircle', bg: '#3a4a3a', iconColor: '#5a7a5a' },
    error: { icon: 'XCircle', bg: '#4a3a3a', iconColor: '#7a5a5a' },
    pending: { icon: 'Clock', bg: '#4a4a3a', iconColor: '#7a7a5a' },
    info: { icon: 'AlertCircle', bg: '#3a3a4a', iconColor: '#5a5a7a' },
  };

  const { icon, bg, iconColor } = config[type];
  const IconComp = Icons[icon];

  return (
    <div style={{
      display: 'flex',
      alignItems: 'center',
      gap: tokens.spacing.md,
      padding: `${tokens.spacing.md} ${tokens.spacing.lg}`,
      background: bg,
      border: '1px solid rgba(255,255,255,0.05)',
      borderRadius: tokens.radius.sm,
    }}>
      <IconComp size={14} color={iconColor} style={{ flexShrink: 0 }} />
      <Text size="sm" color="mid">{children}</Text>
    </div>
  );
};

// Spinner Component
export const Spinner = () => {
  return (
    <div style={{
      width: '14px',
      height: '14px',
      border: '1px solid #222',
      borderTopColor: tokens.colors.iconPrimary,
      borderRadius: '50%',
      animation: 'spin 1s linear infinite',
    }} />
  );
};

// Demo Component with Direct React Rendering
export default function Demo() {
  const [activeTab, setActiveTab] = useState('semantic');
  const [lastAction, setLastAction] = useState(null);

  const handleAction = (action) => {
    setLastAction(action);
    console.log('Action triggered:', action);
  };
  
  const formatFilePath = (path) => {
    const cleanPath = path.startsWith('/') ? path.slice(1) : path;
    const parts = cleanPath.split('/');
    const filename = parts[parts.length - 1];
    const basename = filename.replace(/\.md$/, '');
    return `[[${basename}]]`;
  };

  return (
    <div style={{
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif',
      background: tokens.colors.bgBase,
      color: tokens.colors.textMid,
      minHeight: '100vh',
      padding: '24px'
    }}>
      <div style={{ maxWidth: '900px', margin: '0 auto' }}>
        <Text size="xl" color="bright" style={{ marginBottom: '8px' }}>
          Enhanced Grammar UI System
        </Text>
        <Text size="sm" color="dim" style={{ marginBottom: '24px' }}>
          Two-tier grammar with semantic shortcuts & clickable wikilinks
        </Text>

        <Grid cols="auto" gap="sm" style={{ marginBottom: '24px' }}>
          <Button primary={activeTab === 'semantic'} onClick={() => setActiveTab('semantic')}>
            Semantic Layer
          </Button>
          <Button primary={activeTab === 'components'} onClick={() => setActiveTab('components')}>
            Components
          </Button>
          <Button primary={activeTab === 'editor'} onClick={() => setActiveTab('editor')}>
            Editor
          </Button>
        </Grid>

        {lastAction && (
          <Status type="info" style={{ marginBottom: '16px' }}>
            {lastAction.type === 'file-click' 
              ? `Clicked file: ${lastAction.path}` 
              : `Action: ${lastAction.type}`
            }
          </Status>
        )}

        {activeTab === 'semantic' && (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '32px' }}>
            
            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                File List with Clickable Wikilinks
              </Text>
              
              <Text size="sm" color="dim" style={{ marginBottom: '8px' }}>
                Grammar:
              </Text>
              <pre style={{
                background: tokens.colors.bgSurface,
                border: `1px solid ${tokens.colors.border}`,
                borderRadius: tokens.radius.md,
                padding: tokens.spacing.lg,
                fontSize: tokens.fontSize.xs,
                color: tokens.colors.textMid,
                overflow: 'auto',
                marginBottom: '16px',
                fontFamily: 'monospace',
                whiteSpace: 'pre-wrap'
              }}>{`[text:size-sm,color-mid] ✦ Found 3 files in Projects
[divider:space-md]
[stack:gap-sm]
  [file-list-item:path-Projects/Website.md,link-true,icon-file-text]
  [file-list-item:path-Projects/Mobile-App.md,link-true,icon-file-text,badge-Modified]
  [file-list-item:path-Projects/Brand-Guidelines.md,link-true,icon-file-text]
[/stack]`}</pre>
              
              <Text size="sm" color="dim" style={{ marginBottom: '8px' }}>
                Rendered:
              </Text>
              <Text size="sm" color="mid" style={{ marginBottom: '16px' }}>
                ✦ Found 3 files in Projects
              </Text>
              <Divider space="md" />
              <Stack gap="sm" style={{ marginTop: '16px' }}>
                <Grid cols="auto" gap="sm" align="center">
                  <Icon name="file-text" size={12} color="dim" />
                  <Text 
                    size="sm" 
                    color="mid" 
                    link={true}
                    onClick={() => handleAction({ type: 'file-click', path: formatFilePath('Projects/Website.md') })}
                  >
                    {formatFilePath('Projects/Website.md')}
                  </Text>
                </Grid>
                <Grid cols="auto" gap="sm" align="center">
                  <Icon name="file-text" size={12} color="dim" />
                  <Text 
                    size="sm" 
                    color="mid" 
                    link={true}
                    onClick={() => handleAction({ type: 'file-click', path: formatFilePath('Projects/Mobile-App.md') })}
                  >
                    {formatFilePath('Projects/Mobile-App.md')}
                  </Text>
                  <Badge>Modified</Badge>
                </Grid>
                <Grid cols="auto" gap="sm" align="center">
                  <Icon name="file-text" size={12} color="dim" />
                  <Text 
                    size="sm" 
                    color="mid" 
                    link={true}
                    onClick={() => handleAction({ type: 'file-click', path: formatFilePath('Projects/Brand-Guidelines.md') })}
                  >
                    {formatFilePath('Projects/Brand-Guidelines.md')}
                  </Text>
                </Grid>
              </Stack>
            </div>

            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                Search Results with Context
              </Text>
              
              <Text size="sm" color="dim" style={{ marginBottom: '8px' }}>
                Grammar:
              </Text>
              <pre style={{
                background: tokens.colors.bgSurface,
                border: `1px solid ${tokens.colors.border}`,
                borderRadius: tokens.radius.md,
                padding: tokens.spacing.lg,
                fontSize: tokens.fontSize.xs,
                color: tokens.colors.textMid,
                overflow: 'auto',
                marginBottom: '16px',
                fontFamily: 'monospace',
                whiteSpace: 'pre-wrap'
              }}>{`[text:size-sm,color-mid] ✦ Found 2 entries mentioning "Emma"
[divider:space-md]
[stack:gap-md]
  [search-result:path-Journal/2024-03-15.md,link-true,preview-Emma had her first birthday party...,matches-3]
  [search-result:path-Projects/Website.md,link-true,preview-Meeting with Emma...,matches-2]
[/stack]`}</pre>
              
              <Text size="sm" color="dim" style={{ marginBottom: '8px' }}>
                Rendered:
              </Text>
              <Text size="sm" color="mid" style={{ marginBottom: '16px' }}>
                ✦ Found 2 entries mentioning "Emma"
              </Text>
              <Divider space="md" />
              <Stack gap="md" style={{ marginTop: '16px' }}>
                <Card hover={true}>
                  <Stack gap="sm">
                    <Grid cols="auto" gap="sm" align="center">
                      <Icon name="file-text" size={12} color="dim" />
                      <Text 
                        size="sm" 
                        color="mid"
                        link={true}
                        onClick={() => handleAction({ type: 'file-click', path: formatFilePath('Journal/2024-03-15.md') })}
                      >
                        {formatFilePath('Journal/2024-03-15.md')}
                      </Text>
                    </Grid>
                    <Text size="sm" color="dim">
                      Emma had her first birthday party today and it was magical...
                    </Text>
                    <Badge variant="accent">3 matches</Badge>
                  </Stack>
                </Card>
                <Card hover={true}>
                  <Stack gap="sm">
                    <Grid cols="auto" gap="sm" align="center">
                      <Icon name="file-text" size={12} color="dim" />
                      <Text 
                        size="sm" 
                        color="mid"
                        link={true}
                        onClick={() => handleAction({ type: 'file-click', path: formatFilePath('Projects/Website.md') })}
                      >
                        {formatFilePath('Projects/Website.md')}
                      </Text>
                    </Grid>
                    <Text size="sm" color="dim">
                      Meeting with Emma to discuss design direction...
                    </Text>
                    <Badge variant="accent">2 matches</Badge>
                  </Stack>
                </Card>
              </Stack>
            </div>

            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                File Details with Actions
              </Text>
              <Text size="sm" color="mid" style={{ marginBottom: '16px' }}>
                ✦ Here's what I found about that file
              </Text>
              <Divider space="md" />
              <div style={{ marginTop: '16px' }}>
                <Card>
                  <Stack gap="sm">
                    <Grid cols="auto" gap="sm" align="center">
                      <Icon name="file-text" size={14} color="dim" />
                      <Text 
                        size="sm" 
                        color="bright"
                        link={true}
                        onClick={() => handleAction({ type: 'file-click', path: formatFilePath('Projects/Website-Redesign.md') })}
                      >
                        {formatFilePath('Projects/Website-Redesign.md')}
                      </Text>
                    </Grid>
                    <Grid cols="auto" gap="sm" align="center">
                      <Icon name="tag" size={12} color="dim" />
                      <Text size="sm" color="dim">#project #design #2024</Text>
                    </Grid>
                    <Grid cols="auto" gap="sm" align="center">
                      <Icon name="clock" size={12} color="dim" />
                      <Text size="sm" color="dim">Modified: 2024-03-15</Text>
                    </Grid>
                  </Stack>
                </Card>
                <Grid cols="auto" gap="sm" style={{ marginTop: '8px' }}>
                  <Button icon="external-link" onClick={() => handleAction({ type: 'open', action: 'open' })}>
                    Open file
                  </Button>
                  <Button icon="link" onClick={() => handleAction({ type: 'view-links', action: 'view-links' })}>
                    View links
                  </Button>
                </Grid>
              </div>
            </div>

            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                Vault Statistics
              </Text>
              <Text size="sm" color="mid" style={{ marginBottom: '16px' }}>
                ✦ Here's an overview of your vault
              </Text>
              <Divider space="md" />
              <Grid cols="2" gap="lg" style={{ marginTop: '16px' }}>
                <Card>
                  <Stack gap="xs">
                    <Text size="xl" color="bright">1,247</Text>
                    <Text size="sm" color="dim">Total notes</Text>
                  </Stack>
                </Card>
                <Card>
                  <Stack gap="xs">
                    <Text size="xl" color="bright">34</Text>
                    <Text size="sm" color="dim">Tags</Text>
                  </Stack>
                </Card>
                <Card>
                  <Stack gap="xs">
                    <Text size="xl" color="bright">23</Text>
                    <Text size="sm" color="dim">Orphaned</Text>
                  </Stack>
                </Card>
                <Card>
                  <Stack gap="xs">
                    <Text size="xl" color="bright">5</Text>
                    <Text size="sm" color="dim">Modified today</Text>
                  </Stack>
                </Card>
              </Grid>
            </div>

          </div>
        )}

        {activeTab === 'components' && (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '32px' }}>
            
            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                Badges
              </Text>
              
              <Text size="sm" color="dim" style={{ marginBottom: '8px' }}>
                Grammar:
              </Text>
              <pre style={{
                background: tokens.colors.bgSurface,
                border: `1px solid ${tokens.colors.border}`,
                borderRadius: tokens.radius.md,
                padding: tokens.spacing.lg,
                fontSize: tokens.fontSize.xs,
                color: tokens.colors.textMid,
                overflow: 'auto',
                marginBottom: '16px',
                fontFamily: 'monospace',
                whiteSpace: 'pre-wrap'
              }}>{`[stack:direction-horizontal,gap-sm]
  [badge:variant-default] Default
  [badge:variant-accent] Accent
  [badge:variant-success] Success
  [badge:variant-error] Error
[/stack]`}</pre>
              
              <Text size="sm" color="dim" style={{ marginBottom: '8px' }}>
                Rendered:
              </Text>
              <Stack direction="horizontal" gap="sm">
                <Badge variant="default">Default</Badge>
                <Badge variant="accent">Accent</Badge>
                <Badge variant="success">Success</Badge>
                <Badge variant="error">Error</Badge>
              </Stack>
            </div>

            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                Cards with Actions
              </Text>
              <Card>
                <Stack gap="sm">
                  <Text size="sm" color="bright">Project Overview</Text>
                  <Text size="sm" color="dim">12 files • Last updated today</Text>
                </Stack>
              </Card>
              <Grid cols="auto" gap="sm" style={{ marginTop: '8px' }}>
                <Button icon="external-link" onClick={() => handleAction({ type: 'open', action: 'open' })}>
                  Open
                </Button>
                <Button icon="edit" onClick={() => handleAction({ type: 'edit', action: 'edit' })}>
                  Edit
                </Button>
              </Grid>
            </div>

            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                Status Messages
              </Text>
              <Stack gap="sm">
                <Status type="success">File created successfully</Status>
                <Status type="error">Failed to delete file: Permission denied</Status>
                <Status type="pending">Waiting for approval...</Status>
                <Status type="info">Found 0 files matching criteria</Status>
              </Stack>
            </div>

            <div>
              <Text size="lg" color="bright" style={{ marginBottom: '12px' }}>
                Links
              </Text>
              <Stack gap="sm">
                <Link icon="external-link" onClick={() => handleAction({ type: 'external' })}>
                  Open in new window
                </Link>
                <Link icon="folder" onClick={() => handleAction({ type: 'folder' })}>
                  Browse folder
                </Link>
                <Link icon="search" onClick={() => handleAction({ type: 'search' })}>
                  Search files
                </Link>
              </Stack>
            </div>

          </div>
        )}

        {activeTab === 'editor' && (
          <>
            <Text size="sm" color="dim" style={{ marginBottom: '8px' }}>
              Test your own grammar patterns:
            </Text>
            <Text size="sm" color="dim" style={{ marginBottom: '16px' }}>
              Note: Editor is for reference only. Use the rendered React examples in Semantic/Components tabs.
            </Text>
            <textarea
              placeholder="Paste grammar syntax here to see the structure..."
              style={{
                width: '100%',
                minHeight: '300px',
                background: tokens.colors.bgSurface,
                border: `1px solid ${tokens.colors.border}`,
                borderRadius: tokens.radius.md,
                padding: tokens.spacing.lg,
                color: tokens.colors.textMid,
                fontSize: tokens.fontSize.sm,
                fontFamily: 'monospace',
                resize: 'vertical',
              }}
              defaultValue={`[text:size-sm,color-mid] ✦ Example grammar structure
[divider:space-md]
[stack:gap-sm]
  [file-list-item:path-Projects/Website.md,link-true,icon-file-text]
  [file-list-item:path-Projects/Mobile-App.md,link-true,icon-file-text]
[/stack]`}
            />
          </>
        )}
      </div>
      <style>{`
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
}
